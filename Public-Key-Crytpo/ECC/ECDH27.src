// WARNING: This implementation is NOT secure and shouldn't be used for anything serious
// See ECDH.md for more details

// Define the curve
curve = {"a":0, "b":7, "n":94906249, "G":{"x":87908601, "y":6225285}, "p":94906249} // p = floor(sqrt(2^53)) - 16
// Uses a and b from secp256k1
// y^2 = x^3 + ax + b  <- the curve equation (short Weierstrass curve)
// G is the base point (just a random point)
// p is the finite field number (must be prime)
// Feel free to modidify curve parameters (if you know what you're doing)

// The main elliptic curve math functions
// Points are represented using maps with x and y as indexes -> {"x":0, "y":0}
mod_sub = function(m, s, mod)
	return (((m - s) % mod) + mod) % mod
end function

modInverse = function(n, mod)
	t = 0
	new_t = 1
	r = mod
	new_r = n
	
	while new_r != 0
		quotient = floor(r/new_r)
		
		tmp = new_t
		new_t = t - quotient * new_t
		t = tmp
		
		tmp = new_r
		new_r = r - quotient * new_r
		r = tmp
	end while
	
	if t < 0 then t = t + mod
	return t
end function

point_add = function(p1, p2)
	if (p1.x == 0) and (p1.y == 0) then return p2
	if (p2.x == 0) and (p2.y == 0) then return p1
	
	if p1 == p2 then
		m = ((((((3 * ((p1.x * p1.x) % curve.p)) % curve.p) + curve.a) % curve.p)) * modInverse((2 * p1.y) % curve.p, curve.p)) % curve.p
	else
		m = (mod_sub(p1.y, p2.y, curve.p) * modInverse(mod_sub(p1.x, p2.x, curve.p), curve.p)) % curve.p
	end if
	
	p3 = {"x":0, "y":0}
	p3.x = mod_sub(mod_sub((m * m) % curve.p, p1.x, curve.p), p2.x, curve.p)
	p3.y = mod_sub(0, p1.y + ((m * mod_sub(p3.x, p1.x, curve.p)) % curve.p), curve.p)
	
	return p3
end function

scalar_mult = function(n, P)
	result = {"x":0, "y":0}
	D = P
	
	while n
		if n % 2 == 1 then result = point_add(result, D)
		D = point_add(D, D)
		n = floor(n/2)
	end while
	
	return result
end function


gen_keys = function()
	private_key = floor(rnd * curve.p)+1
	public_key = scalar_mult(private_key, curve.G)
	return {"private":private_key, "public":public_key}
end function

usage = "Usage:\nECDHE27 gen-keys\nECDHE27 sharedsecret <your private key> <friend's public key>"
if params.len > 0 then
	if params[0] == "-h" then exit(usage)
	
	if params[0] == "gen-keys" then
		keys = gen_keys()
		exit("Private Key: "+keys.private+"\nPublic Key: ("+keys.public.x+", "+keys.public.y+")")
	end if

	if params[0] == "sharedsecret" then
		ss = scalar_mult(params[1].to_int, {"x":params[2].to_int, "y":params[3].to_int})
		exit("Shared secret: ("+ss.x+", "+ss.y+")")
	end if
end if
exit(usage)
