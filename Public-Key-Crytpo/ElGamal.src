// ElGamal signature scheme
// You sign messages with your private key
// You verify signatures with the sender's public key
// WARNING: I have no idea how secure or unsecure this implementation is

gcd = function(a, b)
	if a < b then return gcd(b, a)
	if a % b == 0 then return b
	return gcd(b, a % b)
end function

mod_sub = function(m, s, mod)
	return (((m - s) % mod) + mod) % mod
end function

mod_mult =function(x, y, mod)
	result = 0
	x=x%mod
	y=y%mod
	if x < y then
		tmp=y
		y=x
		x=tmp
	end if
	while x > 0 and y > 0
		if y % 2 then result = (result + x) % mod
		x = (x + x) % mod
		y = floor(y/2)
	end while
	return result
end function

mod_exp = function(b, e, mod)
	result = 1
	while e > 0
		if e % 2 then result = mod_mult(b, result, mod)
		e = floor(e/2)
		b = mod_mult(b, b, mod)
	end while
	return result
end function

mod_inv = function(n, mod)
	t = 0
	new_t = 1
	r = mod
	new_r = n % mod
	
	while new_r != 0
		quotient = floor(r/new_r)
		
		tmp = new_t
		new_t = t - quotient * new_t
		t = tmp
		
		tmp = new_r
		new_r = r - quotient * new_r
		r = tmp
	end while
	
	if t < 0 then t = t + mod
	return t
end function


p = 4503599627370449 // (2^52)-47
g = 2

dec2hex = function(num)
	hexTable = "0123456789abcdef"
	result = ""
	for i in range(0, 12)
		result = hexTable[floor(num/(16^i)) % 16] + result
	end for
	return result
end function

hex2dec = function(hex_num)
	hex_num = hex_num.values
	hex_num.reverse
	hex_num = hex_num.join("")
	hexTable = "0123456789abcdef"
	result=0
	for i in hex_num.indexes
		if hex_num[i] == "x" then continue
		result = 16^i * hexTable.indexOf(hex_num[i]) + result
	end for
	return result
end function

gen_keys = function()
	private_key = floor(rnd*(p-2))+1
	public_key = mod_exp(g, private_key, p)
	return {"private":private_key, "public":public_key}
end function

hash_message = function(mesg)
	return hex2dec(md5(mesg)[0:13])
end function

sign_message = function(private_key, mesg)
	hm = hash_message(mesg)
	while true
		k = floor(rnd*(p-3))+2
		if gcd(k, p-1) != 1 then continue
		r = mod_exp(g, k, p)
		s = mod_mult(mod_sub(hm, mod_mult(private_key, r, p-1), p-1), mod_inv(k, p-1), p-1)
		if s > 0 then return {"r":r, "s":s}
	end while
end function

verify_sig = function(public_key, mesg, r, s)
	if (r == 0 or r >= p) or (s == 0 or s >= p-1) then return "Invalid signature"
	hm = hash_message(mesg)
	if mod_exp(g, hm, p) == mod_mult(mod_exp(public_key, r, p), mod_exp(r, s, p), p) then return "Signature matches" else return "Invalid signature"
end function


usage = "Usage:\nElGamal gen-keys\nElGamal sign-message [private key] [message]\nElGamal verify-signature [public key] [message] [r] [s]"
if params.len == 0 then exit(usage)
if params[0] == "gen-keys" then
	keys = gen_keys()
	exit("Private key: 0x"+dec2hex(keys.private)+"\nPublic key: 0x"+dec2hex(keys.public))
end if
if params[0] == "sign-message" then
	signature = sign_message(hex2dec(params[1]), params[2])
	exit("Signature: (0x"+dec2hex(signature.r)+", 0x"+dec2hex(signature.s)+")")
end if
if params[0] == "verify-signature" then exit(verify_sig(hex2dec(params[1]), params[2], hex2dec(params[3]), hex2dec(params[4])))
exit(usage)
